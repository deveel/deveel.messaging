name: Publish Packages

on:
  workflow_call:
    inputs:
      publish-to-nuget:
        description: 'Whether to publish packages to NuGet.org'
        required: true
        type: boolean
        default: false
      build-configuration:
        description: 'Build configuration to use'
        required: false
        type: string
        default: 'Release'
      version:
        description: 'Version to use for packages'
        required: true
        type: string
      nuget-version:
        description: 'NuGet package version'
        required: true
        type: string
      assembly-version:
        description: 'Assembly version'
        required: true
        type: string
      informational-version:
        description: 'Informational version'
        required: true
        type: string

permissions:
  contents: read
  packages: write

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  publish:
    name: "Pack and Publish Packages"
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ inputs.version }}
      nuget-version: ${{ inputs.nuget-version }}
      assembly-version: ${{ inputs.assembly-version }}
      file-version: ${{ inputs.assembly-version }}
      informational-version: ${{ inputs.informational-version }}
      packages-published-to-nuget: ${{ steps.publish-nuget.outputs.published }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Display Version Information
      run: |
        echo "🏷️ Version: ${{ inputs.version }}"
        echo "📦 NuGet Version: ${{ inputs.nuget-version }}"
        echo "🔢 Assembly Version: ${{ inputs.assembly-version }}"
        echo "📄 File Version: ${{ inputs.assembly-version }}"
        echo "ℹ️ Informational Version: ${{ inputs.informational-version }}"
        echo "🚀 Publish to NuGet: ${{ inputs.publish-to-nuget }}"
        echo "⚙️ Build Configuration: ${{ inputs.build-configuration }}"

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          9.0.x

    - name: Restore Dependencies
      run: dotnet restore

    - name: Debug Version Properties
      run: |
        echo "🔍 Version Properties to be used:"
        echo "Version: ${{ inputs.version }}"
        echo "PackageVersion: ${{ inputs.nuget-version }}"
        echo "AssemblyVersion: ${{ inputs.assembly-version }}"
        echo "FileVersion: ${{ inputs.assembly-version }}"
        echo "InformationalVersion: ${{ inputs.informational-version }}"

    - name: Pack Packages
      run: |
        echo "🏗️ Packing packages with explicit version properties..."
        dotnet pack --configuration ${{ inputs.build-configuration }} --include-symbols --output ./nuget \
          --verbosity normal \
          -p:Version="${{ inputs.nuget-version }}" \
          -p:PackageVersion="${{ inputs.nuget-version }}" \
          -p:AssemblyVersion="${{ inputs.assembly-version }}" \
          -p:FileVersion="${{ inputs.assembly-version }}" \
          -p:InformationalVersion="${{ inputs.informational-version }}" \
          -p:UseGitVersion=false

    - name: List Generated Packages
      run: |
        echo "📋 Generated packages:"
        ls -la ./nuget/
        echo ""
        echo "📋 Package details:"
        for pkg in ./nuget/*.nupkg; do
          if [ -f "$pkg" ]; then
            echo "Package: $(basename "$pkg")"
            unzip -l "$pkg" | grep -E '\.(nuspec|dll)$' | head -5
            echo "---"
          fi
        done

    - name: Publish to GitHub Packages
      run: |
        echo "📤 Publishing packages to GitHub Packages..."
        dotnet nuget push ./nuget/**/*.nupkg \
          --skip-duplicate \
          --api-key ${{ secrets.GITHUB_TOKEN }} \
          --source "https://nuget.pkg.github.com/deveel/index.json"
        echo "✅ Successfully published to GitHub Packages"

    - name: Publish to NuGet.org
      id: publish-nuget
      if: inputs.publish-to-nuget == true
      run: |
        if [ -z "${{ secrets.NUGET_API_KEY}}" ]; then
            echo "❌ NUGET_API_KEY secret is not set"
            exit 1
        fi

        echo "📤 Publishing packages to NuGet.org..."
        
        dotnet nuget push ./nuget/**/*.nupkg \
          --skip-duplicate \
          --api-key ${{ secrets.NUGET_API_KEY }} \
          --source https://api.nuget.org/v3/index.json
        
        echo "✅ Successfully published to NuGet.org"
        echo "published=true" >> $GITHUB_OUTPUT

    - name: Upload Package Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages-${{ inputs.nuget-version }}
        path: ./nuget/*.nupkg
        retention-days: 7

  summary:
    needs: publish
    runs-on: ubuntu-latest
    steps:
    - name: Publish Summary
      run: |
        echo "## 📦 Package Publishing Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Version | \`${{ inputs.version }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| NuGet Version | \`${{ inputs.nuget-version }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Assembly Version | \`${{ inputs.assembly-version }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Published to GitHub | ✅ |" >> $GITHUB_STEP_SUMMARY
        echo "| Published to NuGet.org | ${{ inputs.publish-to-nuget == true && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ inputs.publish-to-nuget }}" == "true" ]; then
          echo "🎉 Packages have been published to both GitHub Packages and NuGet.org!" >> $GITHUB_STEP_SUMMARY
        else
          echo "📦 Packages have been published to GitHub Packages only." >> $GITHUB_STEP_SUMMARY
        fi